#include<iostream>
using namespace std;

class heap{
public:
int arr[100];
int size;

heap(){
  arr[0] = -1;
  size = 0;
}

void insertion(int value){ //time complexity will be o(logn)
  size=size+1;
  int index=size;
  arr[index]=value;
  while(index>1){
      int parent=index/2;
  if(arr[index] > arr[parent]){
    swap(arr[index],arr[parent]);
    index=parent;
  }
  else{
    return ;
  }
  
  }


}
void print(){
  for(int i=1;i<=size;i++){
    cout<<arr[i]<<" ";
  }
}

void deletfromheap(){ //T.C will be o(logn)
    if(size==0){
        return ;
    }
    
    arr[1]=arr[size];
    size--;
    
    int i=1;
    while(i<size){
        int leftchild=2*i;
        int rightchild=2*i+1;
        
        if(leftchild<size && arr[i]<arr[leftchild]){
            swap(arr[i],arr[leftchild]);
            i=leftchild;
        }
        
        else if(rightchild<size && arr[i]<arr[rightchild]){
            swap(arr[i],arr[rightchild]);
            i=rightchild;
        }
        else{
            return ;
        }
    }
}

};

void heapify(int arr[],int i,int n){
  int largest=i;
  int leftchild=2*i;
  int rightchild=(2*i)+1;

  if(leftchild < n && arr[largest]<arr[leftchild]){
    largest=leftchild;
  }
  if(rightchild < n && arr[largest]<arr[rightchild]){
    largest=rightchild;
  }

  if(largest!=i){
    swap(arr[largest],arr[i]);
    heapify(arr,largest,n);
  }

}

int main(){
  heap p;
//   p.insertion(55);
//   p.insertion(56);
//   p.insertion(43);
//   p.insertion(34);
  
//   p.print();
  
//   p.deletfromheap();
//   cout<<endl;
//   p.print();

  int arr[6]={-1,54,55,53,56,57};
  int n=5;

  for(int i=n/2;i>=1;i--){
    heapify(arr,i,n+1);
  }

  for(int i=1;i<=n;i++){
      cout<<arr[i]<<" ";
  }
  
  
  


return 0;
}
